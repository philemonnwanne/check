import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Check, Clock, AlertCircle, Link as LinkIcon } from "lucide-react"
import { TaskStatus, TaskPriority, SortOption } from "@/pages/lawyer-dashboard/Tasks"
import { Checkbox } from "@/components/ui/checkbox"
import { useState } from "react"
import { useToast } from "@/hooks/use-toast"

interface Task {
  id: number
  title: string
  description: string
  status: TaskStatus
  priority: TaskPriority
  dueDate: string
  linkedCase: {
    id: string
    title: string
  }
  isAutoGenerated: boolean
  completed?: boolean
}

interface LawyerTaskListProps {
  status: TaskStatus | "all"
  priority: TaskPriority | "all"
  sortBy: SortOption
  selectedCase: string | "all"
}

export function LawyerTaskList({ status, priority, sortBy, selectedCase }: LawyerTaskListProps) {
  const [tasks, setTasks] = useState<Task[]>(mockTasks)
  const { toast } = useToast()

  const handleTaskCompletion = (taskId: number, completed: boolean) => {
    setTasks(prevTasks =>
      prevTasks.map(task =>
        task.id === taskId ? { ...task, completed, status: completed ? "completed" : "pending" } : task
      )
    )
    toast({
      title: completed ? "Task Completed" : "Task Reopened",
      description: completed ? "The task has been marked as completed." : "The task has been reopened.",
    })
  }

  const filteredTasks = tasks
    .filter(task => status === "all" || task.status === status)
    .filter(task => priority === "all" || task.priority === priority)
    .filter(task => selectedCase === "all" || task.linkedCase.id === selectedCase)
    .sort((a, b) => {
      switch (sortBy) {
        case "priority":
          return getPriorityWeight(b.priority) - getPriorityWeight(a.priority)
        case "dueDate":
          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
        case "status":
          return getStatusWeight(b.status) - getStatusWeight(a.status)
        default:
          return 0
      }
    })

  const activeTasks = filteredTasks.filter(task => !task.completed)
  const completedTasks = filteredTasks.filter(task => task.completed)

  return (
    <div className="space-y-8">
      <div>
        <h3 className="text-lg font-semibold mb-4">Active Tasks</h3>
        <TaskTable tasks={activeTasks} onComplete={handleTaskCompletion} />
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-4">Completed Tasks</h3>
        <TaskTable tasks={completedTasks} onComplete={handleTaskCompletion} />
      </div>
    </div>
  )
}

interface TaskTableProps {
  tasks: Task[]
  onComplete: (taskId: number, completed: boolean) => void
}

function TaskTable({ tasks, onComplete }: TaskTableProps) {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead className="w-12">Status</TableHead>
          <TableHead>Title</TableHead>
          <TableHead>Priority</TableHead>
          <TableHead>Due Date</TableHead>
          <TableHead>Linked Case</TableHead>
          <TableHead>Type</TableHead>
          <TableHead className="w-12">Complete</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {tasks.map((task) => (
          <TableRow key={task.id}>
            <TableCell>
              <div className="flex items-center">
                {task.status === "completed" ? (
                  <Check className="h-4 w-4 text-green-500" />
                ) : task.status === "pending" ? (
                  <AlertCircle className="h-4 w-4 text-yellow-500" />
                ) : (
                  <Clock className="h-4 w-4 text-blue-500" />
                )}
              </div>
            </TableCell>
            <TableCell>
              <div>
                <p className="font-medium">{task.title}</p>
                <p className="text-sm text-muted-foreground">{task.description}</p>
              </div>
            </TableCell>
            <TableCell>
              <Badge
                variant={
                  task.priority === "high"
                    ? "destructive"
                    : task.priority === "medium"
                    ? "default"
                    : "secondary"
                }
              >
                {task.priority}
              </Badge>
            </TableCell>
            <TableCell>{new Date(task.dueDate).toLocaleDateString()}</TableCell>
            <TableCell>
              <div className="flex items-center">
                <LinkIcon className="mr-2 h-4 w-4" />
                {task.linkedCase.title}
              </div>
            </TableCell>
            <TableCell>
              <Badge variant="outline">
                {task.isAutoGenerated ? "Auto-generated" : "Manual"}
              </Badge>
            </TableCell>
            <TableCell>
              <Checkbox
                checked={task.completed}
                onCheckedChange={(checked) => onComplete(task.id, checked as boolean)}
              />
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}

function getPriorityWeight(priority: TaskPriority): number {
  switch (priority) {
    case "high":
      return 3
    case "medium":
      return 2
    case "low":
      return 1
  }
}

function getStatusWeight(status: TaskStatus): number {
  switch (status) {
    case "pending":
      return 3
    case "upcoming":
      return 2
    case "completed":
      return 1
  }
}

const mockTasks = [
  {
    id: 1,
    title: "Review Case Documents",
    description: "Review and analyze new evidence submitted for the Johnson case",
    status: "pending",
    priority: "high",
    dueDate: "2024-02-20",
    linkedCase: {
      id: "case1",
      title: "Johnson vs. Smith Corp"
    },
    isAutoGenerated: true
  },
  {
    id: 2,
    title: "Prepare Court Filing",
    description: "Draft and review motion for summary judgment",
    status: "upcoming",
    priority: "medium",
    dueDate: "2024-02-25",
    linkedCase: {
      id: "case2",
      title: "Tech Corp Merger"
    },
    isAutoGenerated: false
  },
  {
    id: 3,
    title: "Client Meeting Notes",
    description: "Compile and organize meeting notes from client consultation",
    status: "completed",
    priority: "low",
    dueDate: "2024-02-15",
    linkedCase: {
      id: "case3",
      title: "Estate Planning - Brown"
    },
    isAutoGenerated: false
  }
]
