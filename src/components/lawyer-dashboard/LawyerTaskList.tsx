import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Check, Clock, AlertCircle, Link as LinkIcon } from "lucide-react"
import { TaskStatus, TaskPriority, SortOption } from "@/pages/lawyer-dashboard/Tasks"

interface Task {
  id: number
  title: string
  description: string
  status: TaskStatus
  priority: TaskPriority
  dueDate: string
  linkedCase: {
    id: string
    title: string
  }
  isAutoGenerated: boolean
}

const mockTasks: Task[] = [
  {
    id: 1,
    title: "Review Case Documents",
    description: "Review and analyze new evidence submitted for the Johnson case",
    status: "pending",
    priority: "high",
    dueDate: "2024-02-20",
    linkedCase: {
      id: "case1",
      title: "Johnson vs. Smith Corp"
    },
    isAutoGenerated: true
  },
  {
    id: 2,
    title: "Prepare Court Filing",
    description: "Draft and review motion for summary judgment",
    status: "upcoming",
    priority: "medium",
    dueDate: "2024-02-25",
    linkedCase: {
      id: "case2",
      title: "Tech Corp Merger"
    },
    isAutoGenerated: false
  },
  {
    id: 3,
    title: "Client Meeting Notes",
    description: "Compile and organize meeting notes from client consultation",
    status: "completed",
    priority: "low",
    dueDate: "2024-02-15",
    linkedCase: {
      id: "case3",
      title: "Estate Planning - Brown"
    },
    isAutoGenerated: false
  }
]

interface LawyerTaskListProps {
  status: TaskStatus | "all"
  priority: TaskPriority | "all"
  sortBy: SortOption
}

export function LawyerTaskList({ status, priority, sortBy }: LawyerTaskListProps) {
  const filteredTasks = mockTasks
    .filter(task => status === "all" || task.status === status)
    .filter(task => priority === "all" || task.priority === priority)
    .sort((a, b) => {
      switch (sortBy) {
        case "priority":
          return getPriorityWeight(b.priority) - getPriorityWeight(a.priority)
        case "dueDate":
          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
        case "status":
          return getStatusWeight(b.status) - getStatusWeight(a.status)
        default:
          return 0
      }
    })

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Status</TableHead>
          <TableHead>Title</TableHead>
          <TableHead>Priority</TableHead>
          <TableHead>Due Date</TableHead>
          <TableHead>Linked Case</TableHead>
          <TableHead>Type</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {filteredTasks.map((task) => (
          <TableRow key={task.id}>
            <TableCell>
              <div className="flex items-center">
                {task.status === "completed" ? (
                  <Check className="h-4 w-4 text-green-500" />
                ) : task.status === "pending" ? (
                  <AlertCircle className="h-4 w-4 text-yellow-500" />
                ) : (
                  <Clock className="h-4 w-4 text-blue-500" />
                )}
                <span className="ml-2">{task.status}</span>
              </div>
            </TableCell>
            <TableCell>
              <div>
                <p className="font-medium">{task.title}</p>
                <p className="text-sm text-muted-foreground">{task.description}</p>
              </div>
            </TableCell>
            <TableCell>
              <Badge
                variant={
                  task.priority === "high"
                    ? "destructive"
                    : task.priority === "medium"
                    ? "default"
                    : "secondary"
                }
              >
                {task.priority}
              </Badge>
            </TableCell>
            <TableCell>{new Date(task.dueDate).toLocaleDateString()}</TableCell>
            <TableCell>
              <div className="flex items-center">
                <LinkIcon className="mr-2 h-4 w-4" />
                {task.linkedCase.title}
              </div>
            </TableCell>
            <TableCell>
              <Badge variant="outline">
                {task.isAutoGenerated ? "Auto-generated" : "Manual"}
              </Badge>
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  )
}

function getPriorityWeight(priority: TaskPriority): number {
  switch (priority) {
    case "high":
      return 3
    case "medium":
      return 2
    case "low":
      return 1
  }
}

function getStatusWeight(status: TaskStatus): number {
  switch (status) {
    case "pending":
      return 3
    case "upcoming":
      return 2
    case "completed":
      return 1
  }
}