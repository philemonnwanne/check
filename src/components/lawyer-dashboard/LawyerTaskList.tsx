import { useState } from "react"
import { useToast } from "@/hooks/use-toast"
import { TaskTable } from "./TaskTable"
import { Task, TaskStatus, TaskPriority, SortOption } from "./types"
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group"

interface LawyerTaskListProps {
  status: TaskStatus | "all"
  priority: TaskPriority | "all"
  sortBy: SortOption
  selectedCase: string | "all"
}

export function LawyerTaskList({ status, priority, sortBy, selectedCase }: LawyerTaskListProps) {
  const [tasks, setTasks] = useState<Task[]>(mockTasks)
  const [viewType, setViewType] = useState<"active" | "completed">("active")
  const { toast } = useToast()

  const handleStatusChange = (taskId: number, newStatus: TaskStatus) => {
    setTasks(prevTasks =>
      prevTasks.map(task =>
        task.id === taskId ? { ...task, status: newStatus } : task
      )
    )
    toast({
      title: `Task ${newStatus}`,
      description: `The task has been marked as ${newStatus}.`,
    })
  }

  const filteredTasks = tasks
    .filter(task => status === "all" || task.status === status)
    .filter(task => priority === "all" || task.priority === priority)
    .filter(task => selectedCase === "all" || task.linkedCase.id === selectedCase)
    .sort((a, b) => {
      switch (sortBy) {
        case "priority":
          return getPriorityWeight(b.priority) - getPriorityWeight(a.priority)
        case "dueDate":
          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()
        case "status":
          return getStatusWeight(b.status) - getStatusWeight(a.status)
        default:
          return 0
      }
    })

  const activeTasks = filteredTasks.filter(task => task.status !== "completed")
  const completedTasks = filteredTasks.filter(task => task.status === "completed")

  return (
    <div className="space-y-8">
      <div className="flex justify-center mb-6">
        <ToggleGroup type="single" value={viewType} onValueChange={(value) => value && setViewType(value as "active" | "completed")}>
          <ToggleGroupItem value="active" aria-label="View active tasks">
            Active Tasks
          </ToggleGroupItem>
          <ToggleGroupItem value="completed" aria-label="View completed tasks">
            Completed Tasks
          </ToggleGroupItem>
        </ToggleGroup>
      </div>

      {viewType === "active" ? (
        <TaskTable tasks={activeTasks} onStatusChange={handleStatusChange} />
      ) : (
        <TaskTable tasks={completedTasks} onStatusChange={handleStatusChange} />
      )}
    </div>
  )
}

function getPriorityWeight(priority: TaskPriority): number {
  switch (priority) {
    case "high":
      return 3
    case "medium":
      return 2
    case "low":
      return 1
  }
}

function getStatusWeight(status: TaskStatus): number {
  switch (status) {
    case "pending":
      return 3
    case "upcoming":
      return 2
    case "completed":
      return 1
  }
}

const mockTasks: Task[] = [
  {
    id: 1,
    title: "Review Case Documents",
    description: "Review and analyze new evidence submitted for the Johnson case",
    status: "pending",
    priority: "high",
    dueDate: "2024-02-20",
    linkedCase: {
      id: "case1",
      title: "Johnson vs. Smith Corp"
    },
    isAutoGenerated: true
  },
  {
    id: 2,
    title: "Prepare Court Filing",
    description: "Draft and review motion for summary judgment",
    status: "upcoming",
    priority: "medium",
    dueDate: "2024-02-25",
    linkedCase: {
      id: "case2",
      title: "Tech Corp Merger"
    },
    isAutoGenerated: false
  },
  {
    id: 3,
    title: "Client Meeting Notes",
    description: "Compile and organize meeting notes from client consultation",
    status: "completed",
    priority: "low",
    dueDate: "2024-02-15",
    linkedCase: {
      id: "case3",
      title: "Estate Planning - Brown"
    },
    isAutoGenerated: false
  }
]